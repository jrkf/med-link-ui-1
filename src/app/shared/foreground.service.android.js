"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Application = require("tns-core-modules/application");
var PendingIntent = android.app.PendingIntent;
var ForegroundService = /** @class */ (function (_super) {
    __extends(ForegroundService, _super);
    function ForegroundService() {
        return _super.call(this) || this;
    }
    ForegroundService.prototype.onCreate = function () {
        _super.prototype.onCreate.call(this);
    };
    ForegroundService.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.stopForeground(true);
    };
    ForegroundService.prototype.onBind = function (param0) {
        console.log(param0);
        return null;
    };
    ForegroundService.prototype.onStartCommand = function (intent, flags, startId) {
        _super.prototype.onStartCommand.call(this, intent, flags, startId);
        this.startForeground(1, this.createNotification(intent));
        console.log("start foreground onstartCommad");
        return android.app.Service.START_STICKY;
    };
    ForegroundService.prototype.createNotification = function (intent) {
        this.disableDozeMode();
        //intent.putExtra('title', 'Medlink');
        var openActivityIntent = new android.content.Intent();
        openActivityIntent.setClassName(Application.android.context, 'com.tns.NativeScriptActivity');
        openActivityIntent.setFlags(android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED | android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
        var openActivityPendingIntent = PendingIntent.getActivity(Application.android.context, 0, openActivityIntent, PendingIntent.FLAG_UPDATE_CURRENT);
        this.createNotificationChannel();
        return this.getNotificationBuilder()
            .setSmallIcon(android.R.drawable.btn_star)
            .setContentTitle(this.getTitle(intent))
            .setContentIntent(openActivityPendingIntent)
            .build();
    };
    ForegroundService.prototype.disableDozeMode = function () {
        if (android.os.Build.VERSION.SDK_INT >= 24) {
            var intent = new android.content.Intent();
            var context = Application.android.context;
            var packageName = context.getPackageName();
            var pm = context.getSystemService(android.content.Context.POWER_SERVICE);
            intent.setFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
            if (!pm.isIgnoringBatteryOptimizations(packageName)) {
                intent.setAction(android.provider.Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
                console.log('udalo sie usunac optymaliazacje baterii');
                intent.setData(android.net.Uri.parse('package:' + packageName));
                context.startActivity(intent);
            }
            // this.wakeScreenByActivity();
        }
    };
    ForegroundService.prototype.getNotificationBuilder = function () {
        if (!android.support.v4.os.BuildCompat.isAtLeastO()) {
            // Not Oreo, not creating notification channel as compatibility issues may exist
            return new android.support.v4.app.NotificationCompat.Builder(this);
        }
        return new android.support.v4.app.NotificationCompat.Builder(this, 'TNS-ForegroundService-1');
    };
    ForegroundService.prototype.updateNotification = function () {
        //this.createNotification("a");
        var importance = android.support.v4.app.NotificationManagerCompat.IMPORTANCE_LOW;
        var mChannel = new android.app.NotificationChannel('TNS-ForegroundService-1', 'TNS-ForegroundService-1', importance);
        //Notification notification=getMyActivityNotification(text);
        // NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        var nm = this.getSystemService(android.content.Context.NOTIFICATION_SERVICE);
        nm.notify(1, mChannel);
    };
    ForegroundService.prototype.createNotificationChannel = function () {
        if (!android.support.v4.os.BuildCompat.isAtLeastO()) {
            // Not Oreo, not creating notification channel as compatibility issues may exist
            return;
        }
        var importance = android.support.v4.app.NotificationManagerCompat.IMPORTANCE_LOW;
        var mChannel = new android.app.NotificationChannel('TNS-ForegroundService-1', 'TNS-ForegroundService-1', importance);
        var nm = this.getSystemService(android.content.Context.NOTIFICATION_SERVICE);
        nm.createNotificationChannel(mChannel);
    };
    ForegroundService.prototype.getTitle = function (intent) {
        if (null == intent || intent.equals(null) || intent.getData() == null) {
            console.log("Nie bylo intentu ??");
        }
        else {
            if (intent.hasExtra('title')) {
                var title = intent.getStringExtra('title').toString();
                if (title) {
                    if (title === null) {
                        return "MED-LINK2";
                    }
                    else {
                        return title;
                    }
                }
                else {
                    return 'MED-LINK';
                }
            }
            else {
                console.log("BAD ERROR!!");
                return 'MED-LINK3';
            }
        }
    };
    ForegroundService.prototype.onStart = function (intent, startId) {
        _super.prototype.onStart.call(this, intent, startId);
    };
    ForegroundService = __decorate([
        JavaProxy('com.tns.ForegroundService'),
        __metadata("design:paramtypes", [])
    ], ForegroundService);
    return ForegroundService;
}(android.app.Service));
exports.ForegroundService = ForegroundService;
//# sourceMappingURL=data:application/json;base64,