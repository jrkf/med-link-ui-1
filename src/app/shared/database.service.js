"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var Sqlite = require("nativescript-sqlite");
var DatabaseService = /** @class */ (function () {
    function DatabaseService() {
        this.execSQLSuccessMonitor = new rxjs_1.Subject();
    }
    DatabaseService.prototype.execSQLMonitored = function (command) {
        var _this = this;
        return this.database.all(command).then(function (result) {
            _this.execSQLSuccessMonitor.next(result);
            return Promise.resolve(result);
        });
    };
    DatabaseService.prototype.createTable = function () {
        var _this = this;
        var adamDb = new Sqlite("test-adam.db");
        var createMyTable = adamDb.then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS entries (id INTEGER primary key autoincrement, glucose TEXT, dateString TEXT, isSend INTEGER DEFAULT 0);")
                .then(function (db2) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS treatments (id INTEGER, basalValue TEXT, dateString TEXT, isSend INTEGER DEFAULT 0);");
            })
                .then(function (db3) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS tempbasal (id INTEGER  primary key autoincrement, percentsOfBasal TEXT, minutes INTEGER, dateString TEXT, isSend INTEGER DEFAULT 0);");
            })
                .then(function (db4) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS devicestatus (id INTEGER, reservoir NUMBER, voltage NUMBER, dateString TEXT, percent TEXT, status TEXT, isSend INTEGER DEFAULT 0);");
            })
                .then(function (db2) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS conf (id INTEGER  primary key autoincrement, nsUrl TEXT, nsKey TEXT, nsKey2 TEXT, dateString TEXT DEFAULT SYSDATE);");
            })
                .then(function (db5) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS MAC (id INTEGER  primary key autoincrement, UUID TEXT, dateString TEXT DEFAULT SYSDATE);");
            })
                .then(function (db6) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS STAN (id INTEGER  primary key autoincrement, Stan Boolean, dateString TEXT DEFAULT SYSDATE);");
            })
                .then(function (db6) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS DEBUG (dateString TEXT DEFAULT SYSDATE, messageType TEXT, message TEXT, category TEXT);");
            })
                .then(function (db6) {
                return db.execSQL("CREATE TABLE IF NOT EXISTS CALC (id INTEGER  primary key autoincrement, idVal INTEGER, dateString TEXT DEFAULT SYSDATE, value TEXT, hour TEXT, category TEXT);");
            })
                .then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERRORs", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    };
    DatabaseService.prototype.insertBG = function (bloodGlucose) {
        return this.database.execSQL("INSERT INTO entries (glucose, dateString) VALUES (?, ?)", [+bloodGlucose.value, bloodGlucose.date.toString()]);
    };
    DatabaseService.prototype.insertBGfromNs = function (value, date, isSend) {
        return this.database.execSQL("INSERT INTO entries (glucose, dateString, isSend) VALUES (?, ?, ?)", [value, date, isSend]);
    };
    DatabaseService.prototype.updateBG = function () {
        return this.database.execSQL("UPDATE entries SET isSend = 1 WHERE isSend = 0");
    };
    DatabaseService.prototype.insertTreatments = function (lastBolus) {
        return this.database.execSQL("INSERT INTO treatments (basalValue, dateString) VALUES (?, ?)", [+lastBolus.value, lastBolus.date.toString()]);
    };
    DatabaseService.prototype.updateTreatments = function () {
        return this.database.execSQL("UPDATE treatments SET isSend = 1 WHERE isSend = 0");
    };
    DatabaseService.prototype.insertDeviceStatus = function (insulinInPompLeft, batteryVoltage, data, status) {
        return this.database.execSQL("INSERT INTO devicestatus (reservoir, voltage, dateString, percent, status) VALUES (?, ?, ?, ?, ?)", [insulinInPompLeft, batteryVoltage, data.data, data.percent, status]);
    };
    DatabaseService.prototype.updateDS = function () {
        return this.database.execSQL("UPDATE devicestatus SET isSend = 1 WHERE isSend = 0");
    };
    DatabaseService.prototype.insertTempBasal = function (percentsOfBasal, minutes, dateString) {
        return this.database.execSQL("INSERT INTO tempbasal (percentsOfBasal, minutes, dateString) VALUES (?, ?, ?)", [percentsOfBasal, minutes, dateString]);
    };
    DatabaseService.prototype.updateTempBasal = function () {
        return this.database.execSQL("UPDATE tempbasal SET isSend = 1 WHERE isSend = 0");
    };
    DatabaseService.prototype.getBG = function () {
        return rxjs_1.from(this.database.all("select * from (SELECT glucose, dateString, isSend, glucose - (select e2.glucose from entries e2 where e2.rowid = e1.rowid-1 and e2.dateString < e1.dateString  ORDER BY e2.dateString LIMIT 1 ) as a from entries e1) where isSend = 0 and glucose != 0"));
    };
    DatabaseService.prototype.getTreatments = function () {
        return rxjs_1.from(this.database.all("SELECT basalValue, dateString FROM treatments WHERE isSend = 0 GROUP BY basalValue, dateString"));
    };
    DatabaseService.prototype.getDS = function () {
        return rxjs_1.from(this.execSQLMonitored("SELECT reservoir, voltage, dateString, percent, status FROM devicestatus WHERE isSend = 0"));
    };
    DatabaseService.prototype.NSconf = function () {
        return rxjs_1.from(this.database.all("SELECT nsUrl, nsKey, nsKey2 FROM conf WHERE nsUrl is not null and nsKey is not null ORDER BY id desc LIMIT 1"));
    };
    DatabaseService.prototype.insertNS = function (nsUrl, nsKey, nsKey2) {
        return this.database.execSQL("INSERT INTO conf (nsUrl, nsKey, nsKey2, dateString) VALUES (?, ?, ?, ?)", [nsUrl, nsKey, nsKey2, new Date()]);
    };
    DatabaseService.prototype.getMAC = function () {
        return this.database.all("SELECT UUID FROM MAC WHERE UUID is not null ORDER BY ID DESC LIMIT 1");
    };
    DatabaseService.prototype.insertMAC = function (uuid) {
        return this.database.execSQL("INSERT INTO MAC (uuid) VALUES (?)", [uuid]);
    };
    DatabaseService.prototype.insertStan = function (stan) {
        return this.database.execSQL("INSERT INTO STAN (stan) VALUES (?)", [stan]);
    };
    DatabaseService.prototype.getStan = function () {
        return rxjs_1.from(this.database.all("SELECT stan FROM STAN WHERE stan is not null ORDER BY ID DESC LIMIT 1; "));
    };
    DatabaseService.prototype.getLastBg = function () {
        return rxjs_1.from(this.database.all("select glucose, SUBSTR(dateString, 4, 18) from entries where glucose != 0 ORDER BY id DESC LIMIT 1"));
    };
    DatabaseService.prototype.getLastBg15 = function () {
        return rxjs_1.from(this.database.all("select glucose, datetime(substr(dateString,12,4) || '-' || case substr(dateString,5,3) when 'Jan' then '01' when 'Feb' then '02' when 'Mar' then '03' when 'Apr' then '04' when 'May' then '05' when 'Jun' then '06' when 'Jul' then '07' when 'Aug' then '08' when 'Sep' then '09' when 'Oct' then '10' when 'Nov' then '11' when 'Dec' then '12' else '01' end || '-' || substr(dateString,9,2) || ' ' || substr(dateString,17,8))  from entries where glucose != 0 and datetime(substr(dateString,12,4) || '-' || case substr(dateString,5,3) when 'Jan' then '01' when 'Feb' then '02' when 'Mar' then '03' when 'Apr' then '04' when 'May' then '05' when 'Jun' then '06' when 'Jul' then '07' when 'Aug' then '08' when 'Sep' then '09' when 'Oct' then '10' when 'Nov' then '11' when 'Dec' then '12' else '01' end || '-' || substr(dateString,9,2) || ' ' || substr(dateString,17,8)) >= datetime('now', '-15 minute', 'localtime') ORDER BY id DESC LIMIT 1"));
    };
    DatabaseService.prototype.getLastBg152 = function () {
        return rxjs_1.from(this.database.all("select glucose, dateString from entries ORDER BY id DESC LIMIT 10"));
    };
    DatabaseService.prototype.getTempBasal = function () {
        return rxjs_1.from(this.database.all("SELECT percentsOfBasal, minutes, dateString FROM tempbasal WHERE isSend = 0 ORDER BY ID DESC LIMIT 1; "));
    };
    DatabaseService.prototype.insertLogs = function (date, message, messageType, category) {
        return this.database.execSQL("INSERT INTO DEBUG (dateString, messageType, message, category) VALUES (?, ?, ?, ?)", [date, message, messageType, category]);
    };
    DatabaseService.prototype.insertCalc = function (date, idVal, value, hour, category) {
        return this.database.execSQL("INSERT INTO CALC (dateString, idVal, value, hour, category) VALUES (?, ?, ?, ?, ?)", [date, idVal, value, hour, category]);
    };
    DatabaseService.prototype.getCalc = function () {
        return rxjs_1.from(this.database.all("select c.idVal, c.category, c.dateString, c.value, c.hour  from CALC c where (dateString) =" +
            " (select calc2.dateString from CALC as calc2 where c.idVal != 0 order by id desc limit 1) and REPLACE(c.hour, ':', '') <= strftime('%H%M','now', 'localtime') and category = 'max' ORDER BY id DESC Limit 1"));
    };
    DatabaseService.prototype.getCalcjnaww = function () {
        return rxjs_1.from(this.database.all("select c.value from CALC c where (dateString) =" +
            " (select calc2.dateString from CALC as calc2 where c.idVal != 0 order by id desc limit 1) and REPLACE(c.hour, ':', '') <= strftime('%H%M','now', 'localtime') and category = 'jnaww' ORDER BY id DESC Limit 1"));
    };
    DatabaseService.prototype.getCalcisf = function () {
        return rxjs_1.from(this.database.all("select c.idVal, c.category, c.dateString, c.value, c.hour  from CALC c where (dateString) =" +
            " (select calc2.dateString from CALC as calc2 where c.idVal != 0 order by id desc limit 1) and REPLACE(c.hour, ':', '') <= strftime('%H%M','now', 'localtime') and category = 'isf' ORDER BY id DESC Limit 1"));
    };
    DatabaseService.prototype.getCalcBgRange = function () {
        return rxjs_1.from(this.database.all("select c.value from CALC c where (dateString) =" +
            " (select calc2.dateString from CALC as calc2 where c.idVal != 0 order by id desc limit 1) and REPLACE(c.hour, ':', '') <= strftime('%H%M','now', 'localtime') and category = 'bgrange' ORDER BY id DESC Limit 1"));
    };
    DatabaseService.prototype.getCalcStep = function () {
        return rxjs_1.from(this.database.all("select c.value from CALC c where (dateString) =" +
            " (select calc2.dateString from CALC as calc2 where c.idVal != 0 order by id desc limit 1) and REPLACE(c.hour, ':', '') <= strftime('%H%M','now', 'localtime') and category = 'step' ORDER BY id DESC Limit 1"));
    };
    DatabaseService.prototype.getLogs = function () {
        return rxjs_1.from(this.database.all("SELECT * FROM DEBUG"));
    };
    DatabaseService = __decorate([
        core_1.Injectable({
            providedIn: "root"
        })
    ], DatabaseService);
    return DatabaseService;
}());
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,